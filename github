from apiclient.discovery import build
from apiclient.errors import HttpError
from oauth2client.tools import argparser
import discord
import webbrowser
import os
import random
requestEnable=1
# Change requestEnable=1 to requestEnable=0 to disable requests

def restart():
        client = discord.Client()
        client.login("EMAIL", "PASSWORD")

        @client.event
        def on_message(message):
                if message.content.startswith("!request ") and requestEnable==0:
                                client.send_message(message.channel, "Sorry, "+message.author.mention+" but requests are disabled at this moment in time.")
                                
                if message.content.startswith("!request ") and requestEnable==1:
                        searchHalf=message.content[9:]
                        print("{0} requested '{1}'".format(message.author,message.content))
                        # Set DEVELOPER_KEY to the API key value from the APIs & auth > Registered apps
                        # tab of
                        #   https://cloud.google.com/console
                        # Please ensure that you have enabled the YouTube Data API for your project.
                        DEVELOPER_KEY = "YOUTUBE API KEY"
                        YOUTUBE_API_SERVICE_NAME = "youtube"
                        YOUTUBE_API_VERSION = "v3"
                        def youtube_search(options):
                          youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,
                            developerKey=DEVELOPER_KEY)

                          # Call the search.list method to retrieve results matching the specified
                          # query term.
                          search_response = youtube.search().list(
                            q=options.q,
                            part="id,snippet",
                            maxResults=options.max_results
                          ).execute()

                          videos = []
                          channels = []
                          playlists = []

                          # Add each result to the appropriate list, and then display the lists of
                          # matching videos, channels, and playlists.
                          for search_result in search_response.get("items", []):
                            if search_result["id"]["kind"] == "youtube#video":
                              global vidid
                              vidid=search_result["id"]["videoId"]
                              videos.append("%s (%s)" % (search_result["snippet"]["title"],
                                                         search_result["id"]["videoId"]))
                            elif search_result["id"]["kind"] == "youtube#channel":
                              channels.append("%s (%s)" % (search_result["snippet"]["title"],
                                                           search_result["id"]["channelId"]))
                            elif search_result["id"]["kind"] == "youtube#playlist":
                              playlists.append("%s (%s)" % (search_result["snippet"]["title"],
                                                            search_result["id"]["playlistId"]))

                          vidid = ("http://www.youtube.com/embed/"+vidid+"?autoplay=1")
                          
                        if __name__ == "__main__":
                          argparser.add_argument("--q", help="Search term", default=searchHalf)
                          argparser.add_argument("--max-results", help="Max results", default=1)
                          argparser.add_argument("--duration", help="Search term", default="short")
                          args = argparser.parse_args()

                          try:
                            youtube_search(args)
                          except HttpError:
                            print ("An HTTP error %d occurred:\n%s" % (e.resp.status, e.content))
                        os.system("taskkill /F /IM chrome.exe")
                        webbrowser.open_new_tab(vidid)
                        restart()

        @client.event
        def on_ready():
            print("Logged in as")
            print(client.user.name)
            print(client.user.id)
            print("------")
            print(discord.User("SolarPolarMan"))

        client.run()

restart()
